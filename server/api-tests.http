### Suni API Tests
### 使用 REST Client 擴展來運行這些測試

@baseUrl = http://localhost:5000
@apiUrl = {{baseUrl}}/api

### Variables
@testEmail = test@example.com
@testPassword = test123456
@adminEmail = admin@suni.com
@adminPassword = admin123456

### 1. Health Check
GET {{baseUrl}}/health

### 2. Root Endpoint
GET {{baseUrl}}/

### 3. User Registration
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "name": "Test User",
  "password": "{{testPassword}}",
  "confirmPassword": "{{testPassword}}"
}

### 4. User Login
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "{{testPassword}}"
}

### 5. Admin Login
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{adminEmail}}",
  "password": "{{adminPassword}}"
}

### 6. Get Profile (需要認證)
GET {{apiUrl}}/auth/profile
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 7. Update Profile (需要認證)
PUT {{apiUrl}}/auth/profile
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "name": "Updated Test User",
  "profile": {
    "firstName": "Updated",
    "lastName": "User",
    "phone": "+1234567890",
    "gender": "male"
  },
  "preferences": {
    "language": "en",
    "currency": "USD",
    "notifications": {
      "email": true,
      "sms": false,
      "push": true
    },
    "marketing": false
  }
}

### 8. Change Password (需要認證)
PUT {{apiUrl}}/auth/change-password
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "currentPassword": "{{testPassword}}",
  "newPassword": "newtest123456",
  "confirmPassword": "newtest123456"
}

### 9. Refresh Token
POST {{apiUrl}}/auth/refresh-token
Content-Type: application/json

{
  "refreshToken": "{{$dotenv REFRESH_TOKEN}}"
}

### 10. Forgot Password
POST {{apiUrl}}/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### 11. Reset Password (使用從 forgot-password 獲得的 token)
POST {{apiUrl}}/auth/reset-password
Content-Type: application/json

{
  "token": "{{$dotenv RESET_TOKEN}}",
  "password": "{{testPassword}}",
  "confirmPassword": "{{testPassword}}"
}

### 12. Logout (需要認證)
POST {{apiUrl}}/auth/logout
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 13. Get All Users (Admin only)
GET {{apiUrl}}/users
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}

### 14. Get User by ID (需要認證)
GET {{apiUrl}}/users/{{$dotenv USER_ID}}
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 15. Search Users (需要認證)
GET {{apiUrl}}/users/search?q=test
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 16. Get User Stats (Admin only)
GET {{apiUrl}}/users/stats
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}

### 17. Create User (Admin only)
POST {{apiUrl}}/users
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}
Content-Type: application/json

{
  "email": "newuser@example.com",
  "name": "New User",
  "password": "password123",
  "role": "member"
}

### 18. Update User (需要認證，本人或管理員)
PUT {{apiUrl}}/users/{{$dotenv USER_ID}}
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "name": "Updated Name",
  "profile": {
    "firstName": "Updated",
    "lastName": "Name"
  }
}

### 19. Toggle User Status (Admin only)
PATCH {{apiUrl}}/users/{{$dotenv USER_ID}}/status
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}
Content-Type: application/json

{
  "isActive": false
}

### 20. Delete User (Admin only)
DELETE {{apiUrl}}/users/{{$dotenv USER_ID}}
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}

### 錯誤測試

### 21. Invalid Login
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "invalid@example.com",
  "password": "wrongpassword"
}

### 22. Unauthorized Access
GET {{apiUrl}}/auth/profile

### 23. Invalid Registration Data
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "invalid-email",
  "name": "",
  "password": "123",
  "confirmPassword": "456"
}

### 24. Duplicate Email Registration
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "name": "Another User",
  "password": "{{testPassword}}",
  "confirmPassword": "{{testPassword}}"
}

### 25. Rate Limiting Test (多次快速請求)
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "wrongpassword"
}

### 26. Rate Limiting Test (多次快速請求)
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "wrongpassword"
}

### 27. Rate Limiting Test (多次快速請求)
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "wrongpassword"
}

### 28. Rate Limiting Test (多次快速請求)
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "wrongpassword"
}

### 29. Rate Limiting Test (多次快速請求)
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "wrongpassword"
}

### 30. Rate Limiting Test (多次快速請求)
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "wrongpassword"
}

### ========================================
### PRODUCT API TESTS
### ========================================

### 31. Get All Products (Public)
GET {{apiUrl}}/products

### 32. Get Products with Pagination
GET {{apiUrl}}/products?page=1&limit=5

### 33. Get Products by Category
GET {{apiUrl}}/products?category=surfboards

### 34. Search Products
GET {{apiUrl}}/products?search=surf

### 35. Get Product Categories
GET {{apiUrl}}/products/categories

### 36. Get Featured Products
GET {{apiUrl}}/products/featured

### 37. Get Product by ID
GET {{apiUrl}}/products/{{$dotenv PRODUCT_ID}}

### 38. Create Product (Admin only)
POST {{apiUrl}}/products
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}
Content-Type: application/json

{
  "name": "Test Surfboard",
  "description": "A high-quality surfboard for beginners",
  "price": 299.99,
  "category": "surfboards",
  "brand": "Test Brand",
  "sku": "TSB001",
  "stock": 10,
  "images": ["https://example.com/surfboard1.jpg"],
  "specifications": {
    "length": "8'0\"",
    "width": "22\"",
    "thickness": "3\"",
    "volume": "45L"
  },
  "features": ["Beginner friendly", "Durable construction"],
  "isActive": true,
  "isFeatured": false
}

### 39. Update Product (Admin only)
PUT {{apiUrl}}/products/{{$dotenv PRODUCT_ID}}
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}
Content-Type: application/json

{
  "name": "Updated Test Surfboard",
  "price": 349.99,
  "stock": 15
}

### 40. Update Product Inventory (Admin only)
PATCH {{apiUrl}}/products/{{$dotenv PRODUCT_ID}}/inventory
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}
Content-Type: application/json

{
  "stock": 20,
  "operation": "add"
}

### 41. Get Product Stats (Admin only)
GET {{apiUrl}}/products/stats
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}

### 42. Delete Product (Admin only)
DELETE {{apiUrl}}/products/{{$dotenv PRODUCT_ID}}
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}

### 43. Create Product - Unauthorized
POST {{apiUrl}}/products
Content-Type: application/json

{
  "name": "Unauthorized Product",
  "price": 100
}

### 44. Update Product - Unauthorized
PUT {{apiUrl}}/products/{{$dotenv PRODUCT_ID}}
Content-Type: application/json

{
  "name": "Unauthorized Update"
}

### ========================================
### PROFILE API TESTS
### ========================================

### 45. Get User Profile (需要認證)
GET {{apiUrl}}/profile
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 46. Update User Profile (需要認證)
PUT {{apiUrl}}/profile
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "name": "Updated User Name",
  "profile": {
    "firstName": "John",
    "lastName": "Doe",
    "phone": "+1234567890",
    "gender": "male",
    "dateOfBirth": "1990-01-01",
    "bio": "I love water activities and beach lifestyle!",
    "location": "San Diego, CA",
    "website": "https://johndoe.com"
  }
}

### 47. Get User Activity History (需要認證)
GET {{apiUrl}}/profile/activity?page=1&limit=10
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 48. Get User Statistics (需要認證)
GET {{apiUrl}}/profile/stats
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 49. Get User Preferences (需要認證)
GET {{apiUrl}}/profile/preferences
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 50. Update User Preferences (需要認證)
PUT {{apiUrl}}/profile/preferences
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "preferences": {
    "language": "en",
    "currency": "USD",
    "timezone": "America/Los_Angeles",
    "notifications": {
      "email": true,
      "sms": false,
      "push": true
    },
    "marketing": false,
    "privacy": {
      "profileVisibility": "public",
      "showEmail": false,
      "showPhone": false
    }
  }
}

### 51. Upload Profile Picture (需要認證)
POST {{apiUrl}}/profile/avatar
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "imageUrl": "https://res.cloudinary.com/example/image/upload/v1234567890/avatar.jpg"
}

### 52. Delete User Account (需要認證)
DELETE {{apiUrl}}/profile
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "password": "{{testPassword}}",
  "confirmation": "DELETE"
}

### 53. Profile Validation Test - Invalid Data
PUT {{apiUrl}}/profile
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "name": "A",
  "profile": {
    "firstName": "",
    "phone": "invalid-phone",
    "gender": "invalid-gender",
    "dateOfBirth": "invalid-date",
    "bio": "This is a very long bio that exceeds the maximum character limit of 500 characters. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium."
  }
}

### 54. Profile Picture Validation Test - Invalid URL
POST {{apiUrl}}/profile/avatar
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "imageUrl": "not-a-valid-url"
}

### 55. Unauthorized Profile Access
GET {{apiUrl}}/profile

### ========================================
### CART API TESTS
### ========================================

### 56. Get Cart (Guest User)
GET {{apiUrl}}/cart
X-Session-ID: guest-session-123

### 57. Get Cart (Authenticated User)
GET {{apiUrl}}/cart
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 58. Add Item to Cart (Guest)
POST {{apiUrl}}/cart/items
X-Session-ID: guest-session-123
Content-Type: application/json

{
  "productId": "{{$dotenv PRODUCT_ID}}",
  "quantity": 2,
  "variant": {
    "size": "Large",
    "color": "Blue"
  }
}

### 59. Add Item to Cart (Authenticated)
POST {{apiUrl}}/cart/items
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "productId": "{{$dotenv PRODUCT_ID}}",
  "quantity": 1
}

### 60. Update Cart Item Quantity
PUT {{apiUrl}}/cart/items
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "productId": "{{$dotenv PRODUCT_ID}}",
  "quantity": 3
}

### 61. Remove Item from Cart
DELETE {{apiUrl}}/cart/items
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "productId": "{{$dotenv PRODUCT_ID}}"
}

### 62. Get Cart Summary
GET {{apiUrl}}/cart/summary
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 63. Validate Cart
POST {{apiUrl}}/cart/validate
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 64. Merge Guest Cart with User Cart
POST {{apiUrl}}/cart/merge
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
X-Session-ID: guest-session-123

### 65. Clear Cart
DELETE {{apiUrl}}/cart/clear
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### ========================================
### CHECKOUT API TESTS
### ========================================

### 66. Initialize Checkout
POST {{apiUrl}}/checkout/initialize
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 67. Get Checkout Session
GET {{apiUrl}}/checkout/session
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 68. Update Shipping Method
PUT {{apiUrl}}/checkout/shipping
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "shippingMethod": "express"
}

### 69. Apply Discount Code
POST {{apiUrl}}/checkout/discount
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "discountCode": "WELCOME10"
}

### 70. Process Checkout
POST {{apiUrl}}/checkout/process
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "shippingAddress": {
    "firstName": "John",
    "lastName": "Doe",
    "company": "Acme Corp",
    "address1": "123 Main St",
    "address2": "Apt 4B",
    "city": "San Diego",
    "state": "CA",
    "zipCode": "92101",
    "country": "US",
    "phone": "+1234567890"
  },
  "billingAddress": {
    "firstName": "John",
    "lastName": "Doe",
    "company": "Acme Corp",
    "address1": "123 Main St",
    "address2": "Apt 4B",
    "city": "San Diego",
    "state": "CA",
    "zipCode": "92101",
    "country": "US",
    "phone": "+1234567890"
  },
  "paymentMethod": "credit-card",
  "shippingMethod": "standard",
  "notes": "Please deliver after 5 PM"
}

### 71. Cart Validation Test - Empty Cart
POST {{apiUrl}}/checkout/initialize
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 72. Invalid Discount Code
POST {{apiUrl}}/checkout/discount
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "discountCode": "INVALID_CODE"
}

### ========================================
### PAYMENT API TESTS
### ========================================

### 73. Create Payment Intent
POST {{apiUrl}}/payment/create-intent
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "amount": 1500,
  "currency": "TWD",
  "orderId": "{{$dotenv ORDER_ID}}",
  "description": "Suni Platform Purchase"
}

### 74. Get Payment Status
GET {{apiUrl}}/payment/status/{{$dotenv PAYMENT_INTENT_ID}}

### 75. Confirm Payment
POST {{apiUrl}}/payment/confirm/{{$dotenv PAYMENT_INTENT_ID}}

### 76. Cancel Payment
POST {{apiUrl}}/payment/cancel/{{$dotenv PAYMENT_INTENT_ID}}

### 77. Create Refund
POST {{apiUrl}}/payment/refund/{{$dotenv PAYMENT_INTENT_ID}}
Content-Type: application/json

{
  "amount": 500,
  "reason": "requested_by_customer"
}

### 78. Get Payment Methods
GET {{apiUrl}}/payment/methods
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 79. Create Stripe Customer
POST {{apiUrl}}/payment/customer
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "email": "customer@example.com",
  "name": "John Doe"
}

### 80. Stripe Webhook (Test)
POST {{apiUrl}}/payment/webhook
Content-Type: application/json
Stripe-Signature: t=1234567890,v1=test_signature

{
  "id": "evt_test_webhook",
  "object": "event",
  "type": "payment_intent.succeeded",
  "data": {
    "object": {
      "id": "pi_test_payment_intent",
      "object": "payment_intent",
      "status": "succeeded",
      "metadata": {
        "orderId": "{{$dotenv ORDER_ID}}"
      }
    }
  }
}

### 81. Payment Intent - Invalid Amount
POST {{apiUrl}}/payment/create-intent
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "amount": -100,
  "currency": "TWD"
}

### 82. Payment Intent - Missing Amount
POST {{apiUrl}}/payment/create-intent
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "currency": "TWD"
}

### 83. Payment Status - Invalid ID
GET {{apiUrl}}/payment/status/invalid_payment_id

### 84. Unauthorized Payment Methods
GET {{apiUrl}}/payment/methods

### ========================================
### ORDER CONFIRMATION API TESTS
### ========================================

### 85. Get Order Confirmation
GET {{apiUrl}}/orders/confirmation/{{$dotenv ORDER_ID}}
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 86. Send Order Confirmation Email
POST {{apiUrl}}/orders/confirmation/{{$dotenv ORDER_ID}}/email
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 87. Get Order Tracking
GET {{apiUrl}}/orders/tracking/{{$dotenv ORDER_ID}}

### 88. Get Order by Order Number (Public)
GET {{apiUrl}}/orders/track/{{$dotenv ORDER_NUMBER}}

### 89. Get Order by Order Number with Email Verification
GET {{apiUrl}}/orders/track/{{$dotenv ORDER_NUMBER}}?email=customer@example.com

### 90. Get User Order History
GET {{apiUrl}}/orders/history?page=1&limit=10
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 91. Cancel Order
POST {{apiUrl}}/orders/{{$dotenv ORDER_ID}}/cancel
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "reason": "Customer requested cancellation"
}

### 92. Update Order Status (Admin)
PUT {{apiUrl}}/orders/{{$dotenv ORDER_ID}}/status
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}
Content-Type: application/json

{
  "status": "shipped",
  "trackingNumber": "TRK123456789",
  "notes": "Order shipped via express delivery"
}

### 93. Update Order Payment Status (Admin)
PUT {{apiUrl}}/orders/{{$dotenv ORDER_ID}}/status
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}
Content-Type: application/json

{
  "status": "confirmed",
  "paymentStatus": "paid",
  "notes": "Payment confirmed"
}

### 94. Get Order Statistics (Admin)
GET {{apiUrl}}/orders/statistics
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}

### 95. Order Confirmation - Invalid Order ID
GET {{apiUrl}}/orders/confirmation/invalid-order-id
Authorization: Bearer {{$dotenv AUTH_TOKEN}}

### 96. Order Tracking - Invalid Order ID
GET {{apiUrl}}/orders/tracking/invalid-order-id

### 97. Cancel Order - Invalid Order ID
POST {{apiUrl}}/orders/invalid-order-id/cancel
Authorization: Bearer {{$dotenv AUTH_TOKEN}}
Content-Type: application/json

{
  "reason": "Test cancellation"
}

### 98. Update Order Status - Invalid Status
PUT {{apiUrl}}/orders/{{$dotenv ORDER_ID}}/status
Authorization: Bearer {{$dotenv ADMIN_TOKEN}}
Content-Type: application/json

{
  "status": "invalid_status"
}

### 99. Unauthorized Order History Access
GET {{apiUrl}}/orders/history

### 100. Unauthorized Order Confirmation Access
GET {{apiUrl}}/orders/confirmation/{{$dotenv ORDER_ID}}
